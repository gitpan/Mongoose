.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MongoDB 3"
.TH MongoDB 3 "2013-01-07" "perl v5.14.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB \- A Mongo Driver for Perl
.SH "VERSION"
.IX Header "VERSION"
version 0.503.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MongoDB;
\&
\&    my $client     = MongoDB::MongoClient\->new(host => \*(Aqlocalhost\*(Aq, port => 27017);
\&    my $database   = $client\->get_database( \*(Aqfoo\*(Aq );
\&    my $collection = $database\->get_collection( \*(Aqbar\*(Aq );
\&    my $id         = $collection\->insert({ some => \*(Aqdata\*(Aq });
\&    my $data       = $collection\->find_one({ _id => $id });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MongoDB is a database access module.
.PP
MongoDB (the database) store all strings as \s-1UTF\-8\s0.  Non\-UTF\-8 strings will be
forcibly converted to \s-1UTF\-8\s0.  To convert something from another encoding to
\&\s-1UTF\-8\s0, you can use Encode:
.PP
.Vb 1
\&    use Encode;
\&
\&    my $name = decode(\*(Aqcp932\*(Aq, "\ex90\exbc\ex96\exec\ex81\ex40\ex91\exbe\ex98\ex59");
\&    my $id = $coll\->insert( { name => $name, } );
\&
\&    my $object = $coll\->find_one( { name => $name } );
.Ve
.PP
Thanks to taronishino for this example.
.SS "Notation and Conventions"
.IX Subsection "Notation and Conventions"
The following conventions are used in this document:
.PP
.Vb 6
\&    $client Database client object
\&    $db     Database
\&    $coll   Collection
\&    undef   C<null> values are represented by undefined values in Perl
\&    \e@arr   Reference to an array passed to methods
\&    \e%attr  Reference to a hash of attribute values passed to methods
.Ve
.PP
Note that Perl will automatically close and clean up database connections if
all references to them are deleted.
.SS "Outline Usage"
.IX Subsection "Outline Usage"
To use MongoDB, first you need to load the MongoDB module:
.PP
.Vb 3
\&    use strict;
\&    use warnings;
\&    use MongoDB;
.Ve
.PP
Then you need to connect to a MongoDB database server.  By default, MongoDB listens
for connections on port 27017.  Unless otherwise noted, this documentation
assumes you are running MongoDB locally on the default port.
.PP
MongoDB can be started in \fIauthentication mode\fR, which requires clients to log in
before manipulating data.  By default, MongoDB does not start in this mode, so no
username or password is required to make a fully functional connection.  If you
would like to learn more about authentication, see the \f(CW\*(C`authenticate\*(C'\fR method.
.PP
To connect to the database, create a new MongoClient object:
.PP
.Vb 1
\&    my $client = MongoDB::MongoClient\->new("host" => "localhost:27017");
.Ve
.PP
As this is the default, we can use the equivalent shorthand:
.PP
.Vb 1
\&    my $client = MongoDB::MongoClient\->new;
.Ve
.PP
Connecting is relatively expensive, so try not to open superfluous connections.
.PP
There is no way to explicitly disconnect from the database.  However, the
connection will automatically be closed and cleaned up when no references to
the \f(CW\*(C`MongoDB::MongoClient\*(C'\fR object exist, which occurs when \f(CW$client\fR goes out of
scope (or earlier if you undefine it with \f(CW\*(C`undef\*(C'\fR).
.SS "\s-1INTERNALS\s0"
.IX Subsection "INTERNALS"
\fIClass Hierarchy\fR
.IX Subsection "Class Hierarchy"
.PP
The classes are arranged in a hierarchy: you cannot create a
MongoDB::Collection instance before you create MongoDB::Database instance,
for example.  The full hierarchy is:
.PP
.Vb 1
\&    MongoDB::MongoClient \-> MongoDB::Database \-> MongoDB::Collection
.Ve
.PP
This is because MongoDB::Database has a field that is a
MongoDB::MongoClient and MongoDB::Collection has a MongoDB::Database
field.
.PP
When you call a MongoDB::Collection function, it \*(L"trickles up\*(R" the chain of
classes.  For example, say we're inserting \f(CW$doc\fR into the collection \f(CW\*(C`bar\*(C'\fR in
the database \f(CW\*(C`foo\*(C'\fR.  The calls made look like:
.ie n .IP """$collection\->insert($doc)""" 4
.el .IP "\f(CW$collection\->insert($doc)\fR" 4
.IX Item "$collection->insert($doc)"
Calls MongoDB::Database's implementation of \f(CW\*(C`insert\*(C'\fR, passing along the
collection name (\*(L"foo\*(R").
.ie n .IP """$db\->insert($name, $doc)""" 4
.el .IP "\f(CW$db\->insert($name, $doc)\fR" 4
.IX Item "$db->insert($name, $doc)"
Calls MongoDB::MongoClient's implementation of \f(CW\*(C`insert\*(C'\fR, passing along the
fully qualified namespace (\*(L"foo.bar\*(R").
.ie n .IP """$client\->insert($ns, $doc)""" 4
.el .IP "\f(CW$client\->insert($ns, $doc)\fR" 4
.IX Item "$client->insert($ns, $doc)"
MongoDB::MongoClient does the actual work and sends a message to the database.
.SH "INTRO TO MONGODB"
.IX Header "INTRO TO MONGODB"
This is the Perl driver for MongoDB, a document-oriented database.  This section
introduces some of the basic concepts of MongoDB.  There's also a \*(L"Tutorial\*(R" in MongoDB::Tutorial
\&\s-1POD\s0 that introduces using the driver.  For more documentation on MongoDB in
general, check out <http://www.mongodb.org>.
.SH "GETTING HELP"
.IX Header "GETTING HELP"
If you have any questions, comments, or complaints, you can get through to the
developers most dependably via the MongoDB user list:
\&\fImongodb\-user@googlegroups.com\fR.  You might be able to get someone quicker
through the MongoDB \s-1IRC\s0 channel, \fIirc.freenode.net#mongodb\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
These functions should generally not be used.  They are very low level and have
nice wrappers in MongoDB::Collection.
.SS "write_insert($ns, \e@objs)"
.IX Subsection "write_insert($ns, @objs)"
.Vb 1
\&    my ($insert, $ids) = MongoDB::write_insert("foo.bar", [{foo => 1}, {bar => \-1}, {baz => 1}]);
.Ve
.PP
Creates an insert string to be used by \f(CW\*(C`MongoDB::MongoClient::send\*(C'\fR.  The second
argument is an array of hashes to insert.  To imitate the behavior of
\&\f(CW\*(C`MongoDB::Collection::insert\*(C'\fR, pass a single hash, for example:
.PP
.Vb 1
\&    my ($insert, $ids) = MongoDB::write_insert("foo.bar", [{foo => 1}]);
.Ve
.PP
Passing multiple hashes imitates the behavior of
\&\f(CW\*(C`MongoDB::Collection::batch_insert\*(C'\fR.
.PP
This function returns the string and an array of the the _id fields that the
inserted hashes will contain.
.ie n .SS "write_query($ns, $flags, $skip, $limit, $query, $fields?)"
.el .SS "write_query($ns, \f(CW$flags\fP, \f(CW$skip\fP, \f(CW$limit\fP, \f(CW$query\fP, \f(CW$fields\fP?)"
.IX Subsection "write_query($ns, $flags, $skip, $limit, $query, $fields?)"
.Vb 1
\&    my ($query, $info) = MongoDB::write_query(\*(Aqfoo.$cmd\*(Aq, 0, 0, \-1, {getlasterror => 1});
.Ve
.PP
Creates a database query to be used by \f(CW\*(C`MongoDB::MongoClient::send\*(C'\fR.  \f(CW$flags\fR
are query flags to use (see \f(CW\*(C`MongoDB::Cursor::Flags\*(C'\fR for possible values).
\&\f(CW$skip\fR is the number of results to skip, \f(CW$limit\fR is the number of results to
return, \f(CW$query\fR is the query hash, and \f(CW$fields\fR is the optional fields to
return.
.PP
This returns the query string and a hash of information about the query that is
used by \f(CW\*(C`MongoDB::MongoClient::recv\*(C'\fR to get the database response to the query.
.ie n .SS "write_update($ns, $criteria, $obj, $flags)"
.el .SS "write_update($ns, \f(CW$criteria\fP, \f(CW$obj\fP, \f(CW$flags\fP)"
.IX Subsection "write_update($ns, $criteria, $obj, $flags)"
.Vb 1
\&    my ($update) = MongoDB::write_update("foo.bar", {age => {\*(Aq$lt\*(Aq => 20}}, {\*(Aq$set\*(Aq => {young => true}}, 0);
.Ve
.PP
Creates an update that can be used with \f(CW\*(C`MongoDB::MongoClient::send\*(C'\fR.  \f(CW$flags\fR
can be 1 for upsert and/or 2 for updating multiple documents.
.ie n .SS "write_remove($ns, $criteria, $flags)"
.el .SS "write_remove($ns, \f(CW$criteria\fP, \f(CW$flags\fP)"
.IX Subsection "write_remove($ns, $criteria, $flags)"
.Vb 1
\&    my ($remove) = MongoDB::write_remove("foo.bar", {name => "joe"}, 0);
.Ve
.PP
Creates a remove that can be used with \f(CW\*(C`MongoDB::MongoClient::send\*(C'\fR.  \f(CW$flags\fR
can be 1 for removing just one matching document.
.SS "read_documents($buffer)"
.IX Subsection "read_documents($buffer)"
.Vb 1
\&  my @documents = MongoDB::read_documents($buffer);
.Ve
.PP
Decodes \s-1BSON\s0 documents from the given buffer.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MongoDB main website <http://www.mongodb.org/>
.PP
Core documentation <http://www.mongodb.org/display/DOCS/Manual>
.PP
MongoDB::Tutorial, MongoDB::Examples
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Kristina Chodorow <kristina@mongodb.org>
.IP "\(bu" 4
Mike Friedman <mike.friedman@10gen.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by 10gen, Inc..
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
