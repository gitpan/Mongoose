.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MongoDB::GridFS 3"
.TH MongoDB::GridFS 3 "2013-01-07" "perl v5.14.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::GridFS \- A file storage utility
.SH "VERSION"
.IX Header "VERSION"
version 0.503.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MongoDB::GridFS;
\&
\&    my $grid = $database\->get_gridfs;
\&    my $fh = IO::File\->new("myfile", "r");
\&    $grid\->insert($fh, {"filename" => "mydbfile"});
.Ve
.PP
There are two interfaces for GridFS: a file\-system/collection\-like interface
(insert, remove, drop, find_one) and a more general interface
(get, put, delete).  Their functionality is the almost identical (get, put and
delete are always safe ops, insert, remove, and find_one are optionally safe),
using one over the other is a matter of preference.
.SH "NAME"
MongoDB::GridFS \- A file storage utility
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Core documentation on GridFS: <http://dochub.mongodb.org/core/gridfs>.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "chunk_size"
.IX Subsection "chunk_size"
The number of bytes per chunk.  Defaults to 1048576.
.SS "prefix"
.IX Subsection "prefix"
The prefix used for the collections.  Defaults to \*(L"fs\*(R".
.SS "files"
.IX Subsection "files"
Collection in which file metadata is stored.  Each document contains md5 and
length fields, plus user-defined metadata (and an _id).
.SS "chunks"
.IX Subsection "chunks"
Actual content of the files stored.  Each chunk contains up to 4Mb of data, as
well as a number (its order within the file) and a files_id (the _id of the file
in the files collection it belongs to).
.SH "METHODS"
.IX Header "METHODS"
.SS "get($id)"
.IX Subsection "get($id)"
.Vb 1
\&    my $file = $grid\->get("my file");
.Ve
.PP
Get a file from GridFS based on its _id.  Returns a MongoDB::GridFS::File.
.ie n .SS "put($fh, $metadata)"
.el .SS "put($fh, \f(CW$metadata\fP)"
.IX Subsection "put($fh, $metadata)"
.Vb 1
\&    my $id = $grid\->put($fh, {filename => "pic.jpg"});
.Ve
.PP
Inserts a file into GridFS, adding a MongoDB::OID as the _id field if the
field is not already defined.  This is a wrapper for \f(CW\*(C`MongoDB::GridFS::insert\*(C'\fR,
see that method below for more information.
.PP
Returns the _id field.
.SS "delete($id)"
.IX Subsection "delete($id)"
.Vb 1
\&    $grid\->delete($id)
.Ve
.PP
Removes the file with the given _id.  Will die if the remove is unsuccessful.
Does not return anything on success.
.ie n .SS "find_one ($criteria?, $fields?)"
.el .SS "find_one ($criteria?, \f(CW$fields\fP?)"
.IX Subsection "find_one ($criteria?, $fields?)"
.Vb 1
\&    my $file = $grid\->find_one({"filename" => "foo.txt"});
.Ve
.PP
Returns a matching MongoDB::GridFS::File or undef.
.ie n .SS "remove ($criteria?, $options?)"
.el .SS "remove ($criteria?, \f(CW$options\fP?)"
.IX Subsection "remove ($criteria?, $options?)"
.Vb 1
\&    $grid\->remove({"filename" => "foo.txt"});
.Ve
.PP
Cleanly removes files from the database.  \f(CW$options\fR is a hash of options for
the remove.  Possible options are:
.IP "just_one If true, only one file matching the criteria will be removed." 4
.IX Item "just_one If true, only one file matching the criteria will be removed."
.PD 0
.IP "safe If true, each remove will be checked for success and die on failure." 4
.IX Item "safe If true, each remove will be checked for success and die on failure."
.PD
.PP
This method doesn't return anything.
.ie n .SS "insert ($fh, $metadata?, $options?)"
.el .SS "insert ($fh, \f(CW$metadata\fP?, \f(CW$options\fP?)"
.IX Subsection "insert ($fh, $metadata?, $options?)"
.Vb 1
\&    my $id = $gridfs\->insert($fh, {"content\-type" => "text/html"});
.Ve
.PP
Reads from a file handle into the database.  Saves the file with the given
metadata.  The file handle must be readable.  \f(CW$options\fR can be
\&\f(CW\*(C`{"safe" =\*(C'\fR true}>, which will do safe inserts and check the \s-1MD5\s0 hash
calculated by the database against an \s-1MD5\s0 hash calculated by the local
filesystem.  If the two hashes do not match, then the chunks already inserted
will be removed and the program will die.
.PP
Because \f(CW\*(C`MongoDB::GridFS::insert\*(C'\fR takes a file handle, it can be used to insert
very long strings into the database (as well as files).  \f(CW$fh\fR must be a
FileHandle (not just the native file handle type), so you can insert a string
with:
.PP
.Vb 3
\&    # open the string like a file
\&    my $basic_fh;
\&    open($basic_fh, \*(Aq<\*(Aq, \e$very_long_string);
\&
\&    # turn the file handle into a FileHandle
\&    my $fh = FileHandle\->new;
\&    $fh\->fdopen($basic_fh, \*(Aqr\*(Aq);
\&
\&    $gridfs\->insert($fh);
.Ve
.SS "drop"
.IX Subsection "drop"
.Vb 1
\&    @files = $grid\->drop;
.Ve
.PP
Removes all files' metadata and contents.
.SS "all"
.IX Subsection "all"
.Vb 1
\&    @files = $grid\->all;
.Ve
.PP
Returns a list of the files in the database.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&  Kristina Chodorow <kristina@mongodb.org>
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Kristina Chodorow <kristina@mongodb.org>
.IP "\(bu" 4
Mike Friedman <mike.friedman@10gen.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by 10gen, Inc..
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
