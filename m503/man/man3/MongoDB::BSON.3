.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MongoDB::BSON 3"
.TH MongoDB::BSON 3 "2013-01-07" "perl v5.14.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::BSON \- Tools for serializing and deserializing data in BSON form
.SH "VERSION"
.IX Header "VERSION"
version 0.503.3
.SH "NAME"
MongoDB::BSON \- Encoding and decoding utilities (more to come)
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .SS """looks_like_number"""
.el .SS "\f(CWlooks_like_number\fP"
.IX Subsection "looks_like_number"
.Vb 2
\&    $MongoDB::BSON::looks_like_number = 1;
\&    $collection\->insert({age => "4"}); # stores 4 as an int
.Ve
.PP
If this is set, the driver will be more aggressive about converting strings into
numbers.  Anything that Scalar::Util's looks_like_number would approve as a
number will be sent to MongoDB as its numeric value.
.PP
Defaults to 0 (for backwards compatibility).
.PP
If you do not set this, you may be using strings more often than you intend to.
See the MongoDB::DataTypes section for more info on the behavior of strings
vs. numbers.
.SS "char"
.IX Subsection "char"
.Vb 2
\&    $MongoDB::BSON::char = ":";
\&    $collection\->query({"x" => {":gt" => 4}});
.Ve
.PP
Can be used to set a character other than \*(L"$\*(R" to use for special operators.
.SS "Turn on/off \s-1UTF8\s0 flag when return strings"
.IX Subsection "Turn on/off UTF8 flag when return strings"
.Vb 2
\&    # turn off utf8 flag on strings
\&    $MongoDB::BSON::utf8_flag_on = 0;
.Ve
.PP
Default is turn on, that compatible with version before 0.34.
.PP
If set to 0, will turn of utf8 flag on string attribute and return on bytes mode, meant same as :
.PP
.Vb 1
\&    utf8::encode($str)
.Ve
.PP
Currently MongoDB return string with utf8 flag, on character mode , some people
wish to turn off utf8 flag and return string on byte mode, it maybe help to display \*(L"pretty\*(R" strings.
.PP
\&\s-1NOTE:\s0
.PP
If you turn off utf8 flag, the string  length will compute as bytes, and is_utf8 will return false.
.SS "Return boolean values as booleans instead of integers"
.IX Subsection "Return boolean values as booleans instead of integers"
.Vb 1
\&    $MongoDB::BSON::use_boolean = 1
.Ve
.PP
By default, booleans are deserialized as integers.  If you would like them to be
deserialized as \*(L"true\*(R" in boolean and \*(L"false\*(R" in boolean, set
\&\f(CW$MongoDB::BSON::use_boolean\fR to 1.
.SS "Return binary data as instances of MongoDB::BSON::Binary instead of string refs."
.IX Subsection "Return binary data as instances of MongoDB::BSON::Binary instead of string refs."
.Vb 1
\&    $MongoDB::BSON::use_binary = 1
.Ve
.PP
For backwards compatibility, binary data is deserialized as a string ref.  If
you would like to have it deserialized as instances of MongoDB::BSON::Binary
(to, say, preserve the subtype), set \f(CW$MongoDB::BSON::use_binary\fR to 1.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Kristina Chodorow <kristina@mongodb.org>
.IP "\(bu" 4
Mike Friedman <mike.friedman@10gen.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by 10gen, Inc..
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
